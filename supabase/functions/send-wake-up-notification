// Supabase Edge Function: send-wake-up-notification
// Sends an urgent wake-up push notification to a single target user.
// Keeps the logic separate from the Pomodoro notification flow so it can evolve independently.
import { createClient } from "jsr:@supabase/supabase-js@2";
import webpush from "npm:web-push";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Max-Age": "86400"
};

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
const VAPID_PUBLIC_KEY = Deno.env.get("VAPID_PUBLIC_KEY");
const VAPID_PRIVATE_KEY = Deno.env.get("VAPID_PRIVATE_KEY");

if (!SUPABASE_URL || !SERVICE_ROLE_KEY) {
  console.error("Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY");
}

if (!VAPID_PUBLIC_KEY || !VAPID_PRIVATE_KEY) {
  console.error("Missing VAPID keys");
}

webpush.setVapidDetails("mailto:nobelft26@gmail.com", VAPID_PUBLIC_KEY ?? "", VAPID_PRIVATE_KEY ?? "");

const supabaseAdmin = SUPABASE_URL && SERVICE_ROLE_KEY ? createClient(SUPABASE_URL, SERVICE_ROLE_KEY) : null;

interface PushSubscriptionRow {
  id: string;
  endpoint: string;
  p256dh: string;
  auth: string;
}

async function fetchLatestSubscription(userId: string) {
  if (!supabaseAdmin) throw new Error("Supabase admin client is not configured");
  const { data, error } = await supabaseAdmin
    .from("push_subscriptions")
    .select("id, endpoint, p256dh, auth")
    .eq("user_id", userId)
    .order("created_at", { ascending: false })
    .limit(1)
    .maybeSingle();

  if (error) {
    throw error;
  }

  return data as (PushSubscriptionRow | null);
}

async function deleteSubscription(id: string) {
  if (!supabaseAdmin) return;
  const { error } = await supabaseAdmin
    .from("push_subscriptions")
    .delete()
    .eq("id", id);
  if (error) {
    console.warn("Failed to delete expired subscription", { id, error });
  }
}

function buildWakePayload(input: {
  senderName?: string | null;
  appId?: string | null;
}) {
  const senderName = typeof input.senderName === "string" && input.senderName.trim() !== ""
    ? input.senderName.trim()
    : "A fellow student";

  const title = "Wake Up Call";
  const body = `${senderName} needs you back in focus!`;

  return {
    title,
    body,
    options: {
      body,
      icon: "https://placehold.co/192x192/0a0a0a/e0e0e0?text=Flow+192",
      badge: "https://placehold.co/96x96/0a0a0a/e0e0e0?text=Flow",
      vibrate: [200, 100, 200, 100, 200],
      tag: "wake-up-alert",
      renotify: true,
      requireInteraction: true,
      data: {
        type: "WAKE_UP_ALERT",
        appId: input.appId ?? null
      },
      actions: [
        { action: "open", title: "Open" },
        { action: "snooze-5m", title: "Snooze 5m" }
      ]
    }
  };
}

Deno.serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  if (req.method !== "POST") {
    return new Response("Method not allowed", { status: 405, headers: corsHeaders });
  }

  try {
    if (!supabaseAdmin) {
      throw new Error("Supabase admin client is not configured");
    }

    const payload = await req.json();
    const targetUserId = typeof payload?.targetUserId === "string" ? payload.targetUserId.trim() : "";
    const senderName = typeof payload?.senderName === "string" ? payload.senderName : null;
    const appId = typeof payload?.appId === "string" ? payload.appId : null;

    if (!targetUserId) {
      return new Response(JSON.stringify({ success: false, message: "Missing targetUserId." }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    }

    const subscription = await fetchLatestSubscription(targetUserId);
    if (!subscription) {
      return new Response(JSON.stringify({
        success: false,
        delivered: false,
        message: "No push subscription found for the target user."
      }), {
        status: 202,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    }

    const webPushSubscription = {
      endpoint: subscription.endpoint,
      keys: {
        p256dh: subscription.p256dh,
        auth: subscription.auth
      }
    };

    const notificationPayload = buildWakePayload({ senderName, appId });

    try {
      await webpush.sendNotification(webPushSubscription, JSON.stringify(notificationPayload), {
        TTL: 30,
        urgency: "high"
      });
    } catch (pushError) {
      console.error("Failed to send wake-up notification", pushError);
      if (pushError && typeof pushError === "object" && "statusCode" in pushError && pushError.statusCode === 410) {
        await deleteSubscription(subscription.id);
      }

      const message = pushError instanceof Error ? pushError.message : String(pushError ?? "Failed to send notification");
      return new Response(JSON.stringify({ success: false, delivered: false, message }), {
        status: 202,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    }

    return new Response(JSON.stringify({ success: true, delivered: true }), {
      status: 200,
      headers: { ...corsHeaders, "Content-Type": "application/json" }
    });
  } catch (error) {
    console.error("Unhandled error in send-wake-up-notification", error);
    const message = error instanceof Error ? error.message : String(error ?? "Unknown error");
    return new Response(JSON.stringify({ success: false, message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" }
    });
  }
});
